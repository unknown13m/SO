#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>

#define MAX_PATH_LEN 256

//]verificarea drepturilor de acces ale unui fișier
int check_file_permissions(const char *path) {
    struct stat file_stat;
    if (stat(path, &file_stat) == -1) {
        perror("Stat error");
        return -1;
    }

    // verifică  toate drepturile 
    if ((file_stat.st_mode & S_IRWXU) == 0 && (file_stat.st_mode & S_IRWXG) == 0 && (file_stat.st_mode & S_IRWXO) == 0) {
        return 1;
    }

    return 0;
}

int analyze_file(const char *path) {
    FILE *file = fopen(path, "r");
    if (file == NULL) {
        perror("Open error");
        return -1;
    }

    char buffer[1024];
    int found_keyword = 0;

]    const char *keywords[] = {"corupt", "periculos", "risc", "atac", "malware", "malitios"};
    while (fgets(buffer, sizeof(buffer), file) != NULL) {
        for (int i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
            if (strstr(buffer, keywords[i]) != NULL) {
                found_keyword = 1;
                break;
            }
        }
        if (found_keyword) {
            break;
        }
    }

    fclose(file);

    // verifică caractere care nu-s ASCII
    for (int i = 0; buffer[i] != '\0'; i++) {
        if ((unsigned char)buffer[i] > 127) {
            found_keyword = 1;
            break;
        }
    }

    return found_keyword;
}

// funcție pentru izolarea fișierelor periculoase
void isolate_file(const char *source_path, const char *destination_path) {
    char destination[MAX_PATH_LEN];
    snprintf(destination, MAX_PATH_LEN, "%s/%s", destination_path, strrchr(source_path, '/') + 1);

    if (rename(source_path, destination) == -1) {
        perror("Rename error");
    } else {
        printf("Fișierul %s a fost izolat cu succes la %s\n", source_path, destination);
    }
}

// funcție pentru parcurgerea recursivă a unui director
void process_directory(const char *dir_path, const char *isolation_dir) {
    DIR *dir = opendir(dir_path);
    if (dir == NULL) {
        perror("Open directory error");
        return;
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue;
        }

        char entry_path[MAX_PATH_LEN];
        snprintf(entry_path, MAX_PATH_LEN, "%s/%s", dir_path, entry->d_name);

        if (entry->d_type == DT_DIR) {
            process_directory(entry_path, isolation_dir);
        } else if (entry->d_type == DT_REG) {
            int result = check_file_permissions(entry_path);
            if (result == 1) {
                int is_dangerous = analyze_file(entry_path);
                if (is_dangerous) {
                    isolate_file(entry_path, isolation_dir);
                }
            } else if (result == -1) {
                // Continie cu uramatoru,] fisier daca apare vreo o\eroare
                continue;
            }
        }
    }

    closedir(dir);
}

int main(int argc, char *argv[]) {
    if (argc < 5 || strcmp(argv[argc - 2], "-o") != 0 || strcmp(argv[argc - 4], "-s") != 0) {
        printf("Utilizare: %s -o director_iesire -s izolated_space_dir dir1 dir2 dir3\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    char *output_dir = argv[argc - 1];
    char *isolation_dir = argv[argc - 3];

    for (int i = 4; i < argc - 4; i++) {
        process_directory(argv[i], isolation_dir);
    }

    return 0;
}
